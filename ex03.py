# -*- coding: utf-8 -*-
"""ex03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1orr_SsawqN_KaYPaDgv5aPRNh1olsdll
"""

board_dimensions = 8
queens = 8

queen_board = []

#Printing output

def print_grid(queen_board):
    grid = ''
    for rows in queen_board:
        for column_value in range(len(rows)):
            #Creating String by adding elements
            if column_value == len(rows)-1:
                grid = grid + rows[column_value]
            else:
                grid = grid + rows[column_value] + " "
        #Adding new elements in next line after each Row
        grid = grid + "\n"
    return grid


#Genereate board based on user Dimensions

def generate_board(length):
    board_values = []
    for i in range(length):
        temp_list = []
        #Filling the list with empty details
        for j in range(length):
            temp_list = temp_list + ['.']
        board_values = board_values + [temp_list]
    return board_values



# Checking possibility for Q at given position

def check_possibility(x_position, y_position):
    #Checking possiblitiy in Vertical and Horizontal
    for position in range(board_dimensions):
        if board[position][y_position] == 'Q' or board[position][position] == 'Q':
            return False



# Checking possiblitiy in Diagonally to the selected row and column
    for row in range(board_dimensions):
        for column in range(board_dimensions):
            if (row+column==x_position+y_position) and (board[row][column]=='Q'):
                    return False
            if (abs(row - column) == abs(x_position-y_position)):
                if (row - column) == (y_position-x_position):
                    if (board[column][row]=='Q'):
                        return False
    return True

def solve(queens_count):
        for column in range(board_dimensions):
            if queens_count < queens:
              #calling check_possibility function
                if check_possibility(queens_count, column):
                    board[queens_count][column] = 'Q'
                    solve(queens_count + 1)
                    if queens_count == queens-1:
                        print(f"queens_count : {queens_count+1} \n{print_grid(board)}")
                        input("Show more?")
                    board[queens_count][column] = '.' 
        return None

#Generating board
board = generate_board(board_dimensions)

solve(0)